Index: silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.iset.silkroad2.repository;\r\n\r\nimport com.iset.silkroad2.entities.Reponse;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface ReponseRepository extends JpaRepository<Reponse,Integer> {\r\n\r\n    Reponse findById(Long id);\r\n    void deleteById(Long id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java b/silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java
--- a/silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java	(revision 55a8c2604bfcdc1fba6ad81e6c9a8798240feb03)
+++ b/silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java	(date 1715866524122)
@@ -1,12 +1,17 @@
 package com.iset.silkroad2.repository;
 
+import com.iset.silkroad2.entities.Question;
 import com.iset.silkroad2.entities.Reponse;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
+import java.util.List;
+
 @Repository
 public interface ReponseRepository extends JpaRepository<Reponse,Integer> {
 
     Reponse findById(Long id);
     void deleteById(Long id);
+
+    List<Reponse> findByQuestion(Question question);
 }
Index: silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.iset.silkroad2.repository;\r\n\r\nimport com.iset.silkroad2.entities.Question;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface QuestionRepository extends JpaRepository<Question,Integer> {\r\n    Question findById(Long id);\r\n\r\n    void deleteById(Long id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java b/silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java
--- a/silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java	(revision 55a8c2604bfcdc1fba6ad81e6c9a8798240feb03)
+++ b/silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java	(date 1715866524117)
@@ -4,9 +4,13 @@
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
+import java.util.List;
+
 @Repository
 public interface QuestionRepository extends JpaRepository<Question,Integer> {
     Question findById(Long id);
 
     void deleteById(Long id);
+
+    List<Question> findByTitreqContaining(String titreq);
 }
Index: silkroad2/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=silkroad2\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\nspring.datasource.url=jdbc:mysql://localhost:3306/silkroad2\r\nspring.datasource.username=root\r\nspring.datasource.password=\r\n\r\n\r\n\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.properties.hibernate.format_sql=true\r\nspring.jpa.database=mysql\r\n#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\r\nserver.port=8085\r\n\r\n\r\nspring.thymeleaf.prefix=classpath:/templates/\r\nspring.thymeleaf.suffix=.html\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/silkroad2/src/main/resources/application.properties b/silkroad2/src/main/resources/application.properties
--- a/silkroad2/src/main/resources/application.properties	(revision 55a8c2604bfcdc1fba6ad81e6c9a8798240feb03)
+++ b/silkroad2/src/main/resources/application.properties	(date 1715866340099)
@@ -11,7 +11,7 @@
 spring.jpa.properties.hibernate.format_sql=true
 spring.jpa.database=mysql
 #spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
-server.port=8085
+server.port=9008
 
 
 spring.thymeleaf.prefix=classpath:/templates/
Index: silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.iset.silkroad2.controller;\r\n\r\nimport com.iset.silkroad2.entities.Personne;\r\nimport com.iset.silkroad2.entities.Question;\r\nimport com.iset.silkroad2.repository.PersonneRepository;\r\nimport com.iset.silkroad2.repository.QuestionRepository;\r\nimport jakarta.transaction.Transactional;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport jakarta.transaction.Transactional;\r\n\r\n\r\nimport javax.swing.*;\r\nimport java.security.Principal;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n\r\n@Controller\r\n@RequestMapping(\"/question\")\r\npublic class QuestionController {\r\n    @Autowired\r\n    QuestionRepository questionRepository;\r\n\r\n\r\n    @Autowired\r\n    PersonneRepository personneRepository; // Corrected the variable name\r\n\r\n    @GetMapping(\"/ask\")\r\n    public String showAskQuestionForm(Model model) {\r\n        model.addAttribute(\"question\", new Question());\r\n        return \"question\";\r\n    }\r\n\r\n    @GetMapping(\"/index\")\r\n    public String showIndex(){\r\n        return \"header,footer/index\";\r\n    }\r\n\r\n\r\n\r\n    @PostMapping(\"/add\")\r\n    public String addQuestion(@ModelAttribute Question question, Principal principal) {\r\n        // Get the current authenticated user's ID\r\n        String username = principal.getName();\r\n        Personne personne = personneRepository.findByNom(username);\r\n        Long userId = personne.getId();\r\n\r\n        // Set the current user's ID and creation date\r\n        question.getPersonne().setId(userId);\r\n        question.setCreatedatQ(new Date());\r\n\r\n        questionRepository.save(question);\r\n        return \"redirect:/index\"; // Redirect to the home page after adding the question\r\n    }\r\n\r\n    @PostMapping(\"/hi\")\r\n    public String addQuestionn(@ModelAttribute(\"question\") Question question) {\r\n        questionRepository.save(question);\r\n        return \"redirect:/index\"; // Redirect to the home page after adding the question\r\n    }\r\n\r\n\r\n\r\n//    signaler\r\n    @PostMapping(\"/signal/{id}\")\r\n    public ResponseEntity<Question> signalerQuestion(@PathVariable Long id) {\r\n        Optional<Question> optionalQuestion = Optional.ofNullable(questionRepository.findById(id));\r\n        if (optionalQuestion.isPresent()) {\r\n            Question question = optionalQuestion.get();\r\n            question.setReported(true);\r\n            questionRepository.save(question);\r\n            return ResponseEntity.ok(question);\r\n        } else {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    @GetMapping(\"\")\r\n    public List<Question> getAllQuestions() {\r\n        return questionRepository.findAll();\r\n    }\r\n\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Question getQuestionById(@PathVariable Long id) {\r\n        return questionRepository.findById(id);\r\n    }\r\n\r\n\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    @Transactional\r\n    public void deleteQuestion(@PathVariable Long id) {\r\n        questionRepository.deleteById(id);\r\n    }\r\n    @PutMapping(\"/modifier/{id}\")\r\n    public Question modiferquestion(@RequestBody Question question , @PathVariable Long id ){\r\n        Question question1 = questionRepository.findById(id);\r\n        question1.setTitreq(question.getTitreq());\r\n        question1.setContenuq(question.getContenuq());\r\n        return questionRepository.save(question1);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java b/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java
--- a/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java	(revision 55a8c2604bfcdc1fba6ad81e6c9a8798240feb03)
+++ b/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java	(date 1715866550400)
@@ -1,11 +1,16 @@
 package com.iset.silkroad2.controller;
 
+
 import com.iset.silkroad2.entities.Personne;
 import com.iset.silkroad2.entities.Question;
+import com.iset.silkroad2.entities.Reponse;
+import com.iset.silkroad2.entities.Tags;
 import com.iset.silkroad2.repository.PersonneRepository;
 import com.iset.silkroad2.repository.QuestionRepository;
-import jakarta.transaction.Transactional;
+import com.iset.silkroad2.repository.ReponseRepository;
+import jakarta.servlet.http.HttpServletRequest;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.crossstore.ChangeSetPersister;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
@@ -17,6 +22,7 @@
 import java.security.Principal;
 import java.util.Date;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 
 
@@ -26,19 +32,42 @@
     @Autowired
     QuestionRepository questionRepository;
 
-
+    @Autowired
+    ReponseRepository  reponseRepository; // Corrected the variable name
     @Autowired
     PersonneRepository personneRepository; // Corrected the variable name
 
     @GetMapping("/ask")
-    public String showAskQuestionForm(Model model) {
+    public String showAskQuestionForm(Model model, @RequestParam(name = "tag", required = false, defaultValue = "Restorant") Tags tag) {
+        List<Question> questions = questionRepository.findAll();//
         model.addAttribute("question", new Question());
-        return "question";
+        model.addAttribute("tags", Tags.values());
+
+        model.addAttribute("questions", questions);//
+
+        return "Question/question";
+    }
+
+
+    @GetMapping("/question/{id}/edit")
+    public String showEditQuestionForm(@PathVariable Long id, Model model) {
+        Question question = questionRepository.findById(id);
+        List<Question> questions = questionRepository.findAll();//
+        model.addAttribute("question", question);
+        model.addAttribute("tags", Tags.values());
+
+        model.addAttribute("questions", questions);//
+
+        return "Question/edit_question";
+    }
+        @GetMapping("/all")
+    public List<Question> getAllQuestions(){
+        return questionRepository.findAll();
     }
 
     @GetMapping("/index")
     public String showIndex(){
-        return "header,footer/index";
+        return "header,footer/header";
     }
 
 
@@ -50,44 +79,29 @@
         Personne personne = personneRepository.findByNom(username);
         Long userId = personne.getId();
 
-        // Set the current user's ID and creation date
         question.getPersonne().setId(userId);
         question.setCreatedatQ(new Date());
 
         questionRepository.save(question);
-        return "redirect:/index"; // Redirect to the home page after adding the question
+        return "redirect:/index";
     }
 
     @PostMapping("/hi")
     public String addQuestionn(@ModelAttribute("question") Question question) {
+        question.setCreatedatQ(new Date());
         questionRepository.save(question);
-        return "redirect:/index"; // Redirect to the home page after adding the question
+        return "redirect:/question/index";
     }
 
 
 
-//    signaler
-    @PostMapping("/signal/{id}")
-    public ResponseEntity<Question> signalerQuestion(@PathVariable Long id) {
-        Optional<Question> optionalQuestion = Optional.ofNullable(questionRepository.findById(id));
-        if (optionalQuestion.isPresent()) {
-            Question question = optionalQuestion.get();
-            question.setReported(true);
-            questionRepository.save(question);
-            return ResponseEntity.ok(question);
-        } else {
-            return ResponseEntity.notFound().build();
-        }
-    }
+
+
 
 
 
 
 
-    @GetMapping("")
-    public List<Question> getAllQuestions() {
-        return questionRepository.findAll();
-    }
 
 
     @GetMapping("/{id}")
@@ -97,21 +111,95 @@
 
 
 
+
+
     @DeleteMapping("/{id}")
     @Transactional
-    public void deleteQuestion(@PathVariable Long id) {
-        questionRepository.deleteById(id);
+    public void deleteQuestion(@PathVariable Long id) throws ChangeSetPersister.NotFoundException {
+        Optional<Question> optionalQuestion = Optional.ofNullable(questionRepository.findById(id));
+        if (optionalQuestion.isPresent()) {
+            Question question = optionalQuestion.get();
+            // Delete related responses
+            List<Reponse> responses = reponseRepository.findByQuestion(question);
+            reponseRepository.deleteAll(responses);
+            // Delete the question
+            questionRepository.deleteById(id);
+        } else {
+            throw new ChangeSetPersister.NotFoundException("Question not found");
+        }
     }
+
     @PutMapping("/modifier/{id}")
-    public Question modiferquestion(@RequestBody Question question , @PathVariable Long id ){
+    public String modiferquestion(@PathVariable Long id, @ModelAttribute("question") Question question) {
         Question question1 = questionRepository.findById(id);
-        question1.setTitreq(question.getTitreq());
-        question1.setContenuq(question.getContenuq());
-        return questionRepository.save(question1);
+        if (question1 != null) {
+            question1.setTitreq(question.getTitreq());
+            question1.setContenuq(question.getContenuq());
+            questionRepository.save(question1);
+            return "redirect:/question/index";
+        } else {
+            // Handle the case where the question with the given ID is not found
+            return "redirect:/error";
+        }
+    }
+
+    @PutMapping("/modify/{id}")
+    public ResponseEntity<Question> modifyQuestion(@RequestBody Question question, @PathVariable Long id) {
+        Optional<Question> optionalQuestion = Optional.ofNullable(questionRepository.findById(id));
+        if (optionalQuestion.isPresent()) {
+            Question existingQuestion = optionalQuestion.get();
+            existingQuestion.setTitreq(question.getTitreq());
+            existingQuestion.setContenuq(question.getContenuq());
+            Question updatedQuestion = questionRepository.save(existingQuestion);
+            return ResponseEntity.ok(updatedQuestion);
+        } else {
+            return ResponseEntity.notFound().build();
+        }
+    }
+
+
+
+    @GetMapping("/questions/search")
+    public String searchByTitle(@RequestParam String titreq, Model model) {
+        List<Question> questions = questionRepository.findByTitreqContaining(titreq);
+        model.addAttribute("questions", questions);
+        return "home/home"; // Assuming this is the name of your Thymeleaf template
+    }
+
+
+
+    @GetMapping("/questions")
+    public String list(Model model) {
+        List<Question> questions = questionRepository.findAll(); // Implement this method in your service
+        model.addAttribute("questions", questions);
+        return "home/home";
     }
 
+
+
+    //    signaler
+    @PostMapping("/signal/{questionId}")
+    public ResponseEntity<?> signalQuestion(@PathVariable Long questionId) {
+        Optional<Question> optionalQuestion = Optional.ofNullable(questionRepository.findById(questionId));
+        if (optionalQuestion.isPresent()) {
+            Question question = optionalQuestion.get();
+            question.setReported(true);
+            questionRepository.save(question);
+            return ResponseEntity.ok(question);
+        } else {
+            return ResponseEntity.notFound().build();
+        }
+    }
 
 
 }
 
 
+
+
+
+
+
+
+
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"789c1bed-682f-4a10-8e7d-d1e5f5440891\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/silkroad2/src/main/java/config/CorsConfig.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/css/footer.css\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/css/header.css\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/img/1.jpg\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/templates/header,footer/header.html\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/templates/question.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/package.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/package.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/App.vue\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/App.vue\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/components/AddQuestion.vue\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/frontend/src/router/index.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/src/router/index.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/silkroad2/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/silkroad2/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/PersonneRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/PersonneRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/silkroad2/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/application.properties\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/silkroad2/src/main/resources/templates/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/silkroad2/src/main/resources/templates/index.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CompilerWorkspaceConfiguration\">\r\n    <option name=\"MAKE_PROJECT_ON_SAVE\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/Silkroad2Application.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"QODANA_PROBLEMS_VIEW_TAB\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2fUxOsEcZvxJmhkMk51i6eTwLiR\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Application.Silkroad2Application.executor&quot;: &quot;Run&quot;,\r\n    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;ToolWindowRun.ShowToolbar&quot;: &quot;false&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/banno/Desktop/GestionBanque-master - Copie bennouri haider&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;advanced.settings&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\silkroadproject\\silkroad2\\src\\main\\java\\com\\iset\\silkroad2\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\silkroadproject\\silkroad2\\src\\main\\resources\\templates\" />\r\n      <recent name=\"C:\\silkroadproject\\silkroad2\\src\\main\\resources\\templates\\header,footer\" />\r\n      <recent name=\"C:\\silkroadproject\\silkroad2\\src\\main\\resources\" />\r\n      <recent name=\"C:\\silkroadproject\\silkroad2\\src\\main\\resources\\static\\imga\\css\\img\" />\r\n      <recent name=\"C:\\silkroadproject\\silkroad2\\src\\main\\resources\\static\\imga\\css\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.iset.silkroad2.entity\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunAnythingCache\">\r\n    <option name=\"myCommands\">\r\n      <command value=\"jpaRepository\" />\r\n    </option>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Silkroad2Application\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.iset.silkroad2.Silkroad2Application\" />\r\n      <module name=\"silkroad2\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.iset.silkroad2.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Silkroad2Application\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"789c1bed-682f-4a10-8e7d-d1e5f5440891\" name=\"Changes\" comment=\"\" />\r\n      <created>1713869428829</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713869428829</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 55a8c2604bfcdc1fba6ad81e6c9a8798240feb03)
+++ b/.idea/workspace.xml	(date 1715866287561)
@@ -4,31 +4,33 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="789c1bed-682f-4a10-8e7d-d1e5f5440891" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/java/config/CorsConfig.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/css/footer.css" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/css/header.css" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/img/1.jpg" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/header,footer/header.html" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/question.html" afterDir="false" />
+    <list default="true" id="789c1bed-682f-4a10-8e7d-d1e5f5440891" name="Changes" comment="i did the header and the footer('who can fix the header and the footer so i can call them in the other file &lt;th:fragment and th:replace won't work &gt;')&#10;and i did the page add question,delete question ,edit question&#10;add answer,delete answer ,adit answer">
+      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/NotFoundException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/static/css/home.css" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/static/js/like/dislike.js" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/home/home.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/package-lock.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/package.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/App.vue" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/App.vue" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/components/AddQuestion.vue" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/src/router/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/src/router/index.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/silkroad2/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/pom.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/QuestionController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/PersonneRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/PersonneRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/QuestionRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/java/com/iset/silkroad2/repository/ReponseRepository.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/application.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/index.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/css/header.css" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/static/css/header.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/img/1.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/static/imgs/1.jpg" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/Question/edit_question.html" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/Question/edit_question.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/Question/footer.css" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/static/css/footer.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/Question/question.html" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/Question/question.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/reponse/edit_reponse.html" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/reponse/edit_reponse.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/reponse/reponse.css" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/static/css/reponse.css" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/reponse/reponse.html" beforeDir="false" afterPath="$PROJECT_DIR$/silkroad2/src/main/resources/templates/reponse/reponse.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="CodeStyleSettingsInfer">
+    <option name="done" value="true" />
   </component>
   <component name="CompilerWorkspaceConfiguration">
     <option name="MAKE_PROJECT_ON_SAVE" value="true" />
@@ -38,9 +40,16 @@
       <list>
         <option value="Interface" />
         <option value="Enum" />
+        <option value="HTML File" />
         <option value="Class" />
-        <option value="HTML File" />
       </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="master" />
+      </map>
     </option>
   </component>
   <component name="HighlightingSettingsPerFile">
@@ -51,6 +60,9 @@
   </component>
   <component name="ProblemsViewState">
     <option name="selectedTabId" value="QODANA_PROBLEMS_VIEW_TAB" />
+  </component>
+  <component name="ProjectCodeStyleSettingsMigration">
+    <option name="version" value="2" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 8
@@ -74,23 +86,26 @@
     &quot;ToolWindowRun.ShowToolbar&quot;: &quot;false&quot;,
     &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
     &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/banno/Desktop/GestionBanque-master - Copie bennouri haider&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/banno/Downloads/js-liveEdit-223.8214.16.zip&quot;,
     &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
     &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
     &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;advanced.settings&quot;
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.keymap&quot;
   }
 }</component>
   <component name="RecentsManager">
+    <key name="CreateClassDialog.RecentsKey">
+      <recent name="com.iset.silkroad2.controller" />
+    </key>
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\silkroadproject\silkroad2\src\main\java\com\iset\silkroad2" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\silkroadproject\silkroad2\src\main\resources\templates" />
-      <recent name="C:\silkroadproject\silkroad2\src\main\resources\templates\header,footer" />
+      <recent name="C:\silkroadproject\silkroad2\src\main\resources\static\imgs" />
+      <recent name="C:\silkroadproject\silkroad2\src\main\resources\static\" />
+      <recent name="C:\silkroadproject\silkroad2\src\main\resources\static" />
+      <recent name="C:\silkroadproject\silkroad2\src\main\resources\css" />
       <recent name="C:\silkroadproject\silkroad2\src\main\resources" />
-      <recent name="C:\silkroadproject\silkroad2\src\main\resources\static\imga\css\img" />
-      <recent name="C:\silkroadproject\silkroad2\src\main\resources\static\imga\css" />
     </key>
     <key name="CopyClassDialog.RECENTS_KEY">
       <recent name="com.iset.silkroad2.entity" />
@@ -102,7 +117,7 @@
     </option>
   </component>
   <component name="RunManager">
-    <configuration name="Silkroad2Application" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+    <configuration name="Silkroad2Application" type="Application" factoryName="Application" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="com.iset.silkroad2.Silkroad2Application" />
       <module name="silkroad2" />
       <extension name="coverage">
@@ -115,11 +130,6 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
-    <recent_temporary>
-      <list>
-        <item itemvalue="Application.Silkroad2Application" />
-      </list>
-    </recent_temporary>
   </component>
   <component name="SharedIndexes">
     <attachedChunks>
@@ -137,9 +147,29 @@
       <option name="presentableId" value="Default" />
       <updated>1713869428829</updated>
     </task>
+    <task id="LOCAL-00001" summary="i did the header and the footer('who can fix the header and the footer so i can call them in the other file &lt;th:fragment and th:replace won't work &gt;')">
+      <created>1714817275092</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1714817275092</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+    <MESSAGE value="i did the header and the footer('who can fix the header and the footer so i can call them in the other file &lt;th:fragment and th:replace won't work &gt;')" />
+    <MESSAGE value="i did the header and the footer('who can fix the header and the footer so i can call them in the other file &lt;th:fragment and th:replace won't work &gt;')&#10;and i did the page add question,delete question ,edit question&#10;add answer,delete answer ,adit answer" />
+    <option name="LAST_COMMIT_MESSAGE" value="i did the header and the footer('who can fix the header and the footer so i can call them in the other file &lt;th:fragment and th:replace won't work &gt;')&#10;and i did the page add question,delete question ,edit question&#10;add answer,delete answer ,adit answer" />
+  </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/silkroadproject$Silkroad2Application.ic" NAME="Silkroad2Application Coverage Results" MODIFIED="1715259569421" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
+      <FILTER>com.iset.silkroad2.*</FILTER>
+    </SUITE>
   </component>
 </project>
\ No newline at end of file
Index: silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.iset.silkroad2.controller;\r\n\r\nimport com.iset.silkroad2.entities.Personne;\r\nimport com.iset.silkroad2.entities.Question;\r\nimport com.iset.silkroad2.entities.Reponse;\r\nimport com.iset.silkroad2.repository.PersonneRepository;\r\nimport com.iset.silkroad2.repository.QuestionRepository;\r\nimport com.iset.silkroad2.repository.ReponseRepository;\r\nimport jakarta.persistence.Column;\r\nimport jakarta.transaction.Transactional;\r\nimport org.springframework.beans.factory.annotation.*;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.security.Principal;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@RestController\r\n@RequestMapping(\"/reponse\")\r\npublic class ReponseController {\r\n\r\n    @Autowired\r\n    ReponseRepository reponseRepository;\r\n    @Autowired\r\n    PersonneRepository personnerepository;\r\n    @Autowired\r\n    QuestionRepository questionrepository;\r\n\r\n    @GetMapping(\"\")\r\n    public List<Reponse> getallreponse(){\r\n        return reponseRepository.findAll();\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Reponse getreponsebyid(@PathVariable long id){\r\n        return reponseRepository.findById(id);\r\n    }\r\n\r\n    @PostMapping(\"/{questionId}/answer\")\r\n    public ResponseEntity<Reponse> addAnswerToQuestion(@PathVariable Long questionId, @RequestBody Reponse reponse, Principal principal) {\r\n        Optional<Question> optionalQuestion = Optional.ofNullable(questionrepository.findById(questionId));\r\n        if (optionalQuestion.isPresent()) {\r\n            Question question = optionalQuestion.get();\r\n            String username =principal.getName();\r\n            Personne personne=personnerepository.findByNom(username);\r\n            reponse.setPersonne(personne);\r\n            reponse.setQuestion(question);\r\n            reponse.setCreatedat(new Date());\r\n            Reponse savedAnswer = reponseRepository.save(reponse);\r\n            return ResponseEntity.ok(savedAnswer);\r\n        } else {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    @PostMapping(\"/add\")\r\n    public Reponse addreponse(@RequestBody Reponse reponse){\r\n        return reponseRepository.save(reponse);\r\n    }\r\n\r\n    @PutMapping(\"/modifier/{id}\")\r\n    public Reponse modifierreponse(@RequestBody Reponse reponse,@PathVariable Long id){\r\n        Reponse reponse1=reponseRepository.findById(id);\r\n        reponse1.setContenua(reponse.getContenua());\r\n\r\n        return reponseRepository.save(reponse1);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    @Transactional\r\n    public void deletereponse(@PathVariable Long id){\r\n        reponseRepository.deleteById(id);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java b/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java
--- a/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java	(revision 55a8c2604bfcdc1fba6ad81e6c9a8798240feb03)
+++ b/silkroad2/src/main/java/com/iset/silkroad2/controller/ReponseController.java	(date 1715866284560)
@@ -10,16 +10,17 @@
 import jakarta.transaction.Transactional;
 import org.springframework.beans.factory.annotation.*;
 import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.*;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
+
 
 import java.security.Principal;
 import java.util.Date;
 import java.util.List;
 import java.util.Optional;
 
-@RestController
+@Controller
 @RequestMapping("/reponse")
 public class ReponseController {
 
@@ -35,12 +36,40 @@
         return reponseRepository.findAll();
     }
 
+//    @GetMapping("/{id}")
+//    public Reponse getreponsebyid(@PathVariable long id){
+//
+//        return reponseRepository.findById(id);
+//    }
+
     @GetMapping("/{id}")
-    public Reponse getreponsebyid(@PathVariable long id){
-        return reponseRepository.findById(id);
+    public String getQuestionById(@PathVariable Long id, Model model) {
+        Question question = questionrepository.findById(id);
+
+        List<Reponse> reponse = question.getReponse();
+
+        model.addAttribute("question", question);
+        model.addAttribute("answers", reponse);
+        model.addAttribute("reponse", new Reponse());
+
+        return "reponse/reponse";
     }
 
-    @PostMapping("/{questionId}/answer")
+//    editer
+@GetMapping("/reponse/{id}/edit")
+public String showEditResponseForm(@PathVariable Long id, Model model) {
+    Reponse reponse = reponseRepository.findById(id);
+    String questionTitre = reponse.getQuestion().getTitreq();
+    model.addAttribute("reponse", reponse);
+    model.addAttribute("questionTitre", questionTitre);
+    return "reponse/edit_reponse";
+}
+
+
+
+
+
+    @PostMapping("/{questionId}/addanswer")
     public ResponseEntity<Reponse> addAnswerToQuestion(@PathVariable Long questionId, @RequestBody Reponse reponse, Principal principal) {
         Optional<Question> optionalQuestion = Optional.ofNullable(questionrepository.findById(questionId));
         if (optionalQuestion.isPresent()) {
@@ -56,11 +85,44 @@
             return ResponseEntity.notFound().build();
         }
     }
-    
+//9bal mane5dem el user
+
 
+    @PutMapping("/modifier/{questionid}")
+    public String addAnswerContentOnly(@PathVariable Long questionId, @ModelAttribute("reponse") Reponse reponse) {
+        Optional<Question> optionalQuestion = Optional.ofNullable(questionrepository.findById(questionId));
+        if (optionalQuestion.isPresent()) {
+            Question question = optionalQuestion.get();
+            Reponse existingReponse = reponseRepository.findById(reponse.getId());
+            existingReponse.setQuestion(question);
+            existingReponse.setContenua(reponse.getContenua());
+            existingReponse.setCreatedat(new Date());
+            Reponse savedAnswer = reponseRepository.save(existingReponse);
+            // Redirect to the template
+            return "redirect:/question/index";
+        } else {
+            // Handle not found case
+            return "error";
+        }
+}
 
+    @PutMapping("/modify/{id}")
+    public String updateResponse(@PathVariable Long id, @ModelAttribute("reponse") Reponse updatedResponse) {
+        Reponse existingResponse = reponseRepository.findById(id);
+        existingResponse.setContenua(updatedResponse.getContenua());
+        reponseRepository.save(existingResponse);
+        return "redirect:/question/index";
+    }
 
 
+
+
+
+//
+
+
+
+
     @PostMapping("/add")
     public Reponse addreponse(@RequestBody Reponse reponse){
         return reponseRepository.save(reponse);
